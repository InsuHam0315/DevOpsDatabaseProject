-- 기존 객체 제거 (DROP TABLE)
DROP TABLE CONGESTION_INDEX CASCADE CONSTRAINTS;
DROP TABLE SETTINGS CASCADE CONSTRAINTS;
DROP TABLE ASSIGNMENTS CASCADE CONSTRAINTS;
DROP TABLE RUN_SUMMARY CASCADE CONSTRAINTS;
DROP TABLE JOBS CASCADE CONSTRAINTS;
DROP TABLE RUNS CASCADE CONSTRAINTS;
DROP TABLE VEHICLES CASCADE CONSTRAINTS;
DROP TABLE EMISSION_FACTORS CASCADE CONSTRAINTS;

-- 기존 객체 제거 (DROP SEQUENCE)
DROP SEQUENCE EMISSION_FACTORS_SEQ;
DROP SEQUENCE JOBS_SEQ;
DROP SEQUENCE RUN_SUMMARY_SEQ;
DROP SEQUENCE ASSIGNMENTS_SEQ;

-- 1. Oracle Sequence 생성
-- #######################################################
CREATE SEQUENCE EMISSION_FACTORS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE JOBS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE RUN_SUMMARY_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE ASSIGNMENTS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;

-- 2. CREATE TABLE DDL (프로젝트 명세 준수)
-- #######################################################
-- 트리거->테이블 생성 순에서 테이블 생성->트리거 순으로 바꿈.
-- 1. EMISSION_FACTORS (CO2 배출 계수 마스터)
CREATE TABLE EMISSION_FACTORS (
    FACTOR_ID NUMBER PRIMARY KEY,
    VEHICLE_TYPE VARCHAR2(50),
    WEIGHT_CLASS VARCHAR2(20),
    FUEL_TYPE VARCHAR2(20),
    CO2_GPKM NUMBER(10, 3) NOT NULL,
    IDLE_GPS NUMBER(10, 3) NOT NULL,
    NOTE VARCHAR2(200)
);

-- 2. VEHICLES (개별 차량 운영 정보)
CREATE TABLE VEHICLES (
    VEHICLE_ID VARCHAR2(20) PRIMARY KEY,
    FACTOR_ID NUMBER NOT NULL REFERENCES EMISSION_FACTORS(FACTOR_ID),
    VEHICLE_TYPE VARCHAR2(10) NOT NULL,
    MODEL_NAME VARCHAR2(50),
    CAPACITY_KG NUMBER(10, 2) NOT NULL
);

-- 3. RUNS (최적화 실행 요청 메인 정보)
CREATE TABLE RUNS (
    RUN_ID VARCHAR2(50) PRIMARY KEY,
    RUN_DATE DATE NOT NULL,
    DEPOT_LAT NUMBER(10, 7),
    DEPOT_LON NUMBER(10, 7),
    NATURAL_LANGUAGE_INPUT CLOB,
    OPTIMIZATION_STATUS VARCHAR2(20) NOT NULL,
    CREATED_AT TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP
);
CREATE INDEX IDX_RUNS_DATE_STATUS ON RUNS (RUN_DATE, OPTIMIZATION_STATUS);

-- 4. JOBS (개별 배송 작업 상세)
CREATE TABLE JOBS (
    JOB_ID NUMBER PRIMARY KEY,
    RUN_ID VARCHAR2(50) NOT NULL REFERENCES RUNS(RUN_ID),
    SECTOR_ID VARCHAR2(50),
    ADDRESS VARCHAR2(255) NOT NULL,
    LATITUDE NUMBER(10, 7) NOT NULL,
    LONGITUDE NUMBER(10, 7) NOT NULL,
    DEMAND_KG NUMBER(10, 2) NOT NULL,
    TW_START TIMESTAMP WITH LOCAL TIME ZONE,
    TW_END TIMESTAMP WITH LOCAL TIME ZONE,
    PRIORITY NUMBER(1) DEFAULT 0
);

-- 5. RUN_SUMMARY (최적화 결과 요약)
CREATE TABLE RUN_SUMMARY (
    SUMMARY_ID NUMBER PRIMARY KEY,
    RUN_ID VARCHAR2(50) UNIQUE NOT NULL REFERENCES RUNS(RUN_ID),
    TOTAL_DISTANCE_KM NUMBER(10, 2) NOT NULL,
    TOTAL_CO2_G NUMBER(10, 3) NOT NULL,
    TOTAL_TIME_MIN NUMBER(5, 0),
    SAVING_PCT NUMBER(5, 2),
    LLM_EXPLANATION CLOB
);

-- 6. ASSIGNMENTS (경로 노드 및 배차 상세)
CREATE TABLE ASSIGNMENTS (
    ASSIGNMENT_ID NUMBER PRIMARY KEY,
    RUN_ID VARCHAR2(50) NOT NULL REFERENCES RUNS(RUN_ID),
    VEHICLE_ID VARCHAR2(20) REFERENCES VEHICLES(VEHICLE_ID),
    STEP_ORDER NUMBER(5, 0) NOT NULL,
    START_JOB_ID NUMBER REFERENCES JOBS(JOB_ID),
    END_JOB_ID NUMBER REFERENCES JOBS(JOB_ID),
    DISTANCE_KM NUMBER(10, 2) NOT NULL,
    CO2_G NUMBER(10, 5) NOT NULL,
    TIME_MIN NUMBER(5, 0),
    ROAD_GRADIENT_PCT NUMBER(5, 2),
    CONGESTION_FACTOR NUMBER(5, 2)
);
CREATE INDEX IDX_ASSIG_RUN_VEHICLE_ORDER ON ASSIGNMENTS (RUN_ID, VEHICLE_ID, STEP_ORDER);

-- 7. SETTINGS (가중치 및 상수 외부화 테이블)
CREATE TABLE SETTINGS (
  key   VARCHAR2(64) PRIMARY KEY,
  value VARCHAR2(128)
);

-- 8. CONGESTION_INDEX (Flask 코드 지원용 테이블 - 추가됨)
CREATE TABLE CONGESTION_INDEX (
    COMPUTED_AT TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,
    HOUR_OF_DAY NUMBER(2, 0) NOT NULL,
    TIME_FACTOR NUMBER(5, 2) NOT NULL,
    IDLE_FACTOR NUMBER(5, 2) NOT NULL,
    PRIMARY KEY (COMPUTED_AT, HOUR_OF_DAY)
);

-- 3. Trigger 생성 (테이블 생성 후에 실행)
-- #######################################################
CREATE OR REPLACE TRIGGER EMISSION_FACTORS_PK_TRG
BEFORE INSERT ON EMISSION_FACTORS FOR EACH ROW
BEGIN IF :NEW.FACTOR_ID IS NULL THEN SELECT EMISSION_FACTORS_SEQ.NEXTVAL INTO :NEW.FACTOR_ID FROM DUAL; END IF; END;
/

CREATE OR REPLACE TRIGGER JOBS_PK_TRG
BEFORE INSERT ON JOBS FOR EACH ROW
BEGIN IF :NEW.JOB_ID IS NULL THEN SELECT JOBS_SEQ.NEXTVAL INTO :NEW.JOB_ID FROM DUAL; END IF; END;
/

CREATE OR REPLACE TRIGGER RUN_SUMMARY_PK_TRG
BEFORE INSERT ON RUN_SUMMARY FOR EACH ROW
BEGIN IF :NEW.SUMMARY_ID IS NULL THEN SELECT RUN_SUMMARY_SEQ.NEXTVAL INTO :NEW.SUMMARY_ID FROM DUAL; END IF; END;
/

CREATE OR REPLACE TRIGGER ASSIGNMENTS_PK_TRG
BEFORE INSERT ON ASSIGNMENTS FOR EACH ROW
BEGIN IF :NEW.ASSIGNMENT_ID IS NULL THEN SELECT ASSIGNMENTS_SEQ.NEXTVAL INTO :NEW.ASSIGNMENT_ID FROM DUAL; END IF; END;
/
